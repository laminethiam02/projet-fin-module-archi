package sn.edu.ugb.reporting.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AccesRapportAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccesRapportAllPropertiesEquals(AccesRapport expected, AccesRapport actual) {
        assertAccesRapportAutoGeneratedPropertiesEquals(expected, actual);
        assertAccesRapportAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccesRapportAllUpdatablePropertiesEquals(AccesRapport expected, AccesRapport actual) {
        assertAccesRapportUpdatableFieldsEquals(expected, actual);
        assertAccesRapportUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccesRapportAutoGeneratedPropertiesEquals(AccesRapport expected, AccesRapport actual) {
        assertThat(actual)
            .as("Verify AccesRapport auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccesRapportUpdatableFieldsEquals(AccesRapport expected, AccesRapport actual) {
        assertThat(actual)
            .as("Verify AccesRapport relevant properties")
            .satisfies(a -> assertThat(a.getUtilisateurId()).as("check utilisateurId").isEqualTo(expected.getUtilisateurId()))
            .satisfies(a -> assertThat(a.getRapportId()).as("check rapportId").isEqualTo(expected.getRapportId()))
            .satisfies(a -> assertThat(a.getDateAcces()).as("check dateAcces").isEqualTo(expected.getDateAcces()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccesRapportUpdatableRelationshipsEquals(AccesRapport expected, AccesRapport actual) {
        // empty method
    }
}
